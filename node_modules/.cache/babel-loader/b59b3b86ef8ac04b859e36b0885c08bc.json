{"ast":null,"code":"export default {\n  name: 'Timetable',\n\n  data() {\n    return {\n      // To determine whenever the timetable matrix is parsed or not\n      parsed: false,\n      // The timetable 2D matrix\n      timetable: [[]],\n      // courses list  (save in database)\n      courses: [],\n      // The days in a week\n      days: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n      // The time period\n      period: ['0830-0930', '0930-1030', '1030-1130', '1130-1230', '1230-1330', '1330-1430', '1430-1530', '1530-1630', '1630-1730', '1730-1830']\n    };\n  },\n\n  methods: {\n    // Transfer the days to specific numbers\n    dayToNumber(day) {\n      switch (day) {\n        case 'Mo':\n          return 1;\n\n        case 'Tu':\n          return 2;\n\n        case 'We':\n          return 3;\n\n        case 'Th':\n          return 4;\n\n        case 'Fr':\n          return 5;\n\n        case 'Sa':\n          return 6;\n\n        case 'Su':\n          return 7;\n\n        default:\n          return -1;\n      }\n    },\n\n    // Initalise the timetable array\n    initTimetable() {\n      let element = {\n        courseCode: '',\n        color: 'transparent',\n        span: 1\n      };\n\n      for (let i = 0; i < 10; i++) {\n        this.timetable[i] = [];\n\n        for (let j = 0; j < 5; j++) {\n          this.timetable[i][j] = element;\n        }\n      } // update the timetable matrix\n\n\n      this.updateTimetable();\n    },\n\n    // Get the courses data and place the event into timetable matrix\n    updateTimetable() {\n      this.courses.forEach(c => {\n        // for each courses\n        let {\n          courseCode,\n          times,\n          color\n        } = c;\n        times.forEach(t => {\n          // for each course period\n          let {\n            day,\n            start,\n            end\n          } = t;\n          start = Math.floor(parseInt(start) / 100); // starting time represents in number\n\n          end = Math.floor(parseInt(end) / 100); // ending time represents in number\n\n          day = this.dayToNumber(day); // day number\n\n          let span = end - start; // number of rows have to span\n\n          let element = {\n            courseCode,\n            color,\n            span\n          }; // the element in timetable matrix\n\n          this.timetable[start - 8].splice(day - 1, 1, element); // place the element into timetable matrix\n          // if there is a span, set the covered element's span to 0\n\n          for (let i = 1; i <= span - 1; i++) {\n            element = {\n              courseCode: '',\n              color: '',\n              span: 0\n            };\n            this.timetable[start - 8 + i].splice(day - 1, 1, element); // place the element into timetable matrix\n          }\n        });\n      });\n      this.parsed = true; // the timetable was parsed\n    },\n\n    // Return the elements from timetable array\n    getElement(e, i, j) {\n      if (!this.parsed) {\n        return '';\n      }\n\n      switch (e) {\n        case 'courseCode':\n          return this.timetable[i][j].courseCode;\n\n        case 'color':\n          return this.timetable[i][j].color;\n\n        case 'span':\n          return this.timetable[i][j].span;\n\n        case 'repeat':\n          return this.timetable[i][j].span !== 0;\n\n        default:\n          return null;\n      }\n    },\n\n    // [Ajax Req] Get courses information\n    getCourses() {\n      fetch('http://127.0.0.1:8081/timetable').then(res => {\n        return res.json();\n      }).then(json => {\n        this.courses = json;\n        this.initTimetable();\n      }).catch(err => {\n        console.error(err);\n        this.courses = [// CSCI3130\n        {\n          courseCode: 'CSCI3130',\n          times: [{\n            day: 'Mo',\n            start: '1630',\n            end: '1815'\n          }, {\n            day: 'Tu',\n            start: '1630',\n            end: '1715'\n          }, {\n            day: 'Th',\n            start: '1730',\n            end: '1815'\n          }],\n          color: '#F3B03D'\n        }, // CSCI3150\n        {\n          courseCode: 'CSCI3150',\n          times: [{\n            day: 'Tu',\n            start: '1230',\n            end: '1415'\n          }, {\n            day: 'We',\n            start: '1030',\n            end: '1115'\n          }, {\n            day: 'Th',\n            start: '1630',\n            end: '1715'\n          }],\n          color: '#D5D5D5'\n        }, // CSCI3160\n        {\n          courseCode: 'CSCI3160',\n          times: [{\n            day: 'We',\n            start: '1130',\n            end: '1315'\n          }, {\n            day: 'Th',\n            start: '1130',\n            end: '1215'\n          }, {\n            day: 'Th',\n            start: '1330',\n            end: '1415'\n          }],\n          color: '#71C0F9'\n        }, // ESTR3108\n        {\n          courseCode: 'ESTR3108',\n          times: [{\n            day: 'Tu',\n            start: '1430',\n            end: '1615'\n          }, {\n            day: 'We',\n            start: '1730',\n            end: '1815'\n          }, {\n            day: 'Th',\n            start: '0930',\n            end: '1115'\n          }],\n          color: '#F19BC8'\n        }, // UGEB2530\n        {\n          courseCode: 'UGEB2530',\n          times: [{\n            day: 'We',\n            start: '1430',\n            end: '1715'\n          }],\n          color: '#97F9EA'\n        }, // UGEC2945\n        {\n          courseCode: 'UGEC2945',\n          times: [{\n            day: 'Mo',\n            start: '1430',\n            end: '1615'\n          }],\n          color: '#A5F66A'\n        }, // GEWS1000\n        {\n          courseCode: 'GEWS1000',\n          times: [{\n            day: 'Fr',\n            start: '1130',\n            end: '1315'\n          }],\n          color: '#FDEF71'\n        }];\n        this.initTimetable();\n      });\n    }\n\n  },\n\n  mounted() {\n    this.$nextTick(this.getCourses);\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}